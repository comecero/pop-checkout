{"version":3,"names":[],"mappings":"","sources":["pages.js"],"sourcesContent":["app.directive('ccExpDate', function () {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            date: '=?',\r\n            expMonth: '=?',\r\n            expYear: '=?'\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n            // Credit card expiration formatter\r\n            var isExpInputDelete = false;\r\n            document.addEventListener(\"keydown\", function (event) {\r\n                if (event.which == 8 || event.which == 46) {\r\n                    isExpInputDelete = true;\r\n                } else {\r\n                    isExpInputDelete = false;\r\n                }\r\n            });\r\n\r\n            // Pretty-formats the credit card expiration date\r\n            scope.$watch(\"date\", function (newVal, oldVal) {\r\n\r\n                if (newVal != oldVal) {\r\n\r\n                    if (!newVal) {\r\n                        scope.date = null;\r\n                        return;\r\n                    }\r\n\r\n                    if (newVal == \"1/\") {\r\n                        scope.date = \"01 / \";\r\n                        return;\r\n                    }\r\n\r\n                    // Check if pressing backspace or delete.\r\n                    if (isExpInputDelete) {\r\n                        if (utils.right(newVal, 2) == \" /\") {\r\n                            scope.date = utils.left(newVal, newVal.length - 2);\r\n                            return;\r\n                        }\r\n                        scope.date = newVal;\r\n                        return;\r\n                    }\r\n\r\n                    // Remove any non-numeric from the string\r\n                    var result = \"\";\r\n                    if (newVal) {\r\n                        result = newVal.replace(/[^0-9]/g, \"\");\r\n                    }\r\n\r\n                    // If the length is 1 and the character is 2-9, prepend with a 0. When the user first types 2-9, it will be converted to 02 - 09.\r\n                    if (result.length == 1 && /[2-9]/.test(result)) {\r\n                        result = \"0\".concat(result);\r\n                    }\r\n\r\n                    // If the length is 2 and the second character is 3-9, insert a \" / \" after the second character\r\n                    if (result.length == 2 && /[3-9]/.test(utils.right(result, 1))) {\r\n                        result = result + \" / \";\r\n                    }\r\n\r\n                    // If the length is 2 characters or more, put a / at position 3 unless oldVal is longer than newVal, which means they're backspacing, or unless the last character are already \"/ \".\r\n                    if (result.length >= 2 && utils.right(result, 2) != \"/ \") {\r\n                        result = result.substring(0, 2) + \" / \" + utils.right(result, result.length - 2);\r\n                    }\r\n\r\n                    // Dump anything after 9 charaters\r\n                    if (result.length >= 9) {\r\n                        result = utils.left(result, 9);\r\n                    }\r\n\r\n                    scope.date = result;\r\n\r\n                    // Fill the expiration date on the model with any valid values you have\r\n                    if (result.length >= 2) {\r\n                        scope.expMonth = result.substring(0, 2);\r\n                    }\r\n\r\n                    if (result.length >= 7) {\r\n                        scope.expYear = utils.right(result, 2);\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n    };\r\n});\r\n\r\napp.directive('postalCodePlaceholder', ['gettextCatalog', function (gettextCatalog) {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            postalCodePlaceholder: '=?',\r\n            country: '=?'\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n            scope.$watch(\"country\", function (newVal, oldVal) {\r\n                if (newVal == \"US\") {\r\n                    scope.postalCodePlaceholder = \"ZIP\";\r\n                } else {\r\n                    scope.postalCodePlaceholder = gettextCatalog.getString(\"Postal Code\");\r\n                }\r\n            });\r\n\r\n        }\r\n    };\r\n}]);\r\n\r\napp.directive('downloadReceipt', ['ApiService', function (ApiService) {\r\n\r\n    return {\r\n        restrict: 'A',\r\n        scope: {\r\n            orderId: '=?',\r\n            orderUrl: '=?',\r\n            error: '=?'\r\n        },\r\n        link: function (scope, elem, attrs) {\r\n\r\n            elem.bind(\"click\", function () {\r\n                ApiService.getItemPdf(scope.orderUrl).then(function (response) {\r\n                    var file = new Blob([response.data], { type: \"application/pdf\" });\r\n                    saveAs(file, \"Order_\" + scope.orderId + \".pdf\");\r\n                }, function (error) {\r\n                    scope.error = error;\r\n                });\r\n            });\r\n        }\r\n    };\r\n}]);\r\n\r\n\r\napp.directive('insertHtml', function () {\r\n    return {\r\n        restrict: 'AE',\r\n        link: function (scope, element, attrs) {\r\n        },\r\n        templateUrl: function (elem, attrs) {\r\n            return attrs.insertHtml;\r\n        }\r\n    }\r\n});\napp.controller(\"IndexController\", ['$scope', 'ApiService', 'SettingsService', function ($scope, ApiService, SettingsService) {\r\n\r\n    window.location = \"getting-started\";\r\n\r\n}]);\napp.controller(\"CheckoutController\", ['$scope', 'CartService', 'GeoService', 'CurrencyService', 'SettingsService', 'HelperService', 'PaymentService', 'LanguageService', 'StorageService', '$uibModal', '$timeout', 'gettextCatalog', '$location', '$document', '$routeParams', function ($scope, CartService, GeoService, CurrencyService, SettingsService, HelperService, PaymentService, LanguageService, StorageService, $uibModal, $timeout, gettextCatalog, $location, $document, $routeParams) {\r\n\r\n    // Determine if you are running as a modal\r\n    var asModal = $scope.$resolve.asModal;\r\n\r\n    // Define a place to hold your data\r\n    $scope.data = {};\r\n\r\n    // Load in the default payment method\r\n    $scope.data.showSection = \"payment\"; // payment, review, receipt\r\n\r\n    // Load in some helpers\r\n    $scope.geoService = GeoService;\r\n    $scope.settings = SettingsService.get();\r\n    $scope.helpers = HelperService;\r\n    $scope.options = { showSpinner: false, showForm: false, payment_method: \"credit_card\" };\r\n    $scope.paymentParams = { expand: \"payment_method.data,order.customer,order.items.product,order.items.subscription,order.options,cart.options,cart.items.subscription_terms\" };\r\n\r\n    // Set the cart parameters\r\n    $scope.data.params = {};\r\n    $scope.data.params.expand = \"items.product,items.subscription_terms,customer.payment_methods,options\";\r\n    $scope.data.params.hide = \"items.product.formatted,items.product.prices,items.product.url,items.product.description,items.product.images.link_small,items.product.images.link_medium,items.product.images.link_large,items.product.images.link,items.product.images.filename,items.product.images.formatted,items.product.images.url,items.product.images.date_created,items.product.images.date_modified\";\r\n\r\n    // Set default values.\r\n    $scope.data.payment_method = {}; // Will be populated from the user's input into the form.\r\n    $scope.data.header_image = $scope.settings.app.logo_popup_square || \"images/default_popup_icon.png\";\r\n    $scope.data.order = null;\r\n\r\n    // Build your payment method models\r\n    $scope.data.card = { \"type\": \"credit_card\" };\r\n    $scope.data.amazon_pay = { \"type\": \"amazon_pay\" };\r\n    $scope.data.paypal = {\r\n        \"type\": \"paypal\",\r\n        data: {\r\n            // The following tokens are allowed in the URL: {{payment_id}}, {{order_id}}, {{customer_id}}, {{invoice_id}}. The tokens will be replaced with the actual values upon redirect.\r\n            \"success_url\": window.location.href.substring(0, window.location.href.indexOf(\"#\")) + \"#/\" + \"simple/review/{{payment_id}}\",\r\n            \"cancel_url\": SettingsService.get().app.main_shopping_url || localStorage.getItem(\"parent_url\") || window.location.href\r\n        }\r\n    }\r\n\r\n    $scope.showSpinner = function (delay) {\r\n        if (!delay) delay = 0;\r\n        $scope.options.showForm = false;\r\n        $scope.spinnerTimeout = $timeout(function () {\r\n            $scope.options.showSpinner = true;\r\n        }, delay);\r\n    }\r\n\r\n    $scope.hideSpinner = function () {\r\n        $scope.options.showForm = true;\r\n        $scope.options.showSpinner = false;\r\n        if ($scope.spinnerTimeout)\r\n            $timeout.cancel($scope.spinnerTimeout);\r\n    }\r\n\r\n    // Set the language if supplied by an explicit parameter\r\n    setLanguage($location.search());\r\n\r\n    // If returning to the page from an external such as PayPal, the payment_id will be in the URL.\r\n    var payment_id = $routeParams.id;\r\n\r\n    if (payment_id) {\r\n\r\n        // This is a return from an external page such as PayPal. Get the payment.\r\n        PaymentService.get(payment_id, $scope.paymentParams).then(function (payment) {\r\n\r\n            $scope.data.payment = payment;\r\n            $scope.data.cart = payment.cart;\r\n\r\n            // Check if the payment is already done. The status could be completed (captured) or pending (completed but not yet captured).\r\n            if (payment.status == \"completed\" || payment.status == \"pending\") {\r\n                $scope.data.showSection = \"receipt\";\r\n            } else {\r\n                $scope.data.showSection = \"review\";\r\n            }\r\n\r\n            openPop(asModal);\r\n\r\n        }, function (error) {\r\n            $scope.data.error = error;\r\n            openPop(asModal);\r\n        });\r\n\r\n    } else {\r\n\r\n        // Get the cart from the query parameters\r\n        var cart = $location.search().cart;\r\n        if (cart) {\r\n            cart = JSON.parse(cart);\r\n            $location.search(\"cart\", null);\r\n        } else {\r\n            // Fallback to traditional cart input parameters, useful for manual testing.\r\n            cart = CartService.fromParams({}, $location);\r\n        }\r\n\r\n        // If new tab (mobile), run the setCart function on load.\r\n        if (!asModal) {\r\n            $scope.showSpinner(350);\r\n            setCart(cart);\r\n        }\r\n    }\r\n\r\n    function setCart(cart) {\r\n\r\n        // If the customer email has been provided and is invalid, remove it.\r\n        if (cart && cart.customer && cart.customer.email && !utils.isValidEmail(cart.customer.email)) {\r\n            delete cart.customer.email;\r\n        }\r\n\r\n        // Make a copy of the input so you can determine what information has been provided in advance for use in the view.\r\n        $scope.data.input = angular.copy(cart);\r\n\r\n        // Update the cart. There might not be a cart at this point; if not, the CartService.update process will create and return a new cart for the user.\r\n        CartService.update(cart, $scope.data.params, true).then(function (cart) {\r\n\r\n            // Set the scope on the cart.\r\n            $scope.data.cart = cart;\r\n\r\n            // Hide or cancel showing the spinner\r\n            $scope.hideSpinner();\r\n\r\n            // Show the checkout form\r\n            openPop(asModal);\r\n\r\n            // Override the header image, as necessary.\r\n            if ($scope.settings.app.use_product_icon && cart.items[0].product.images[0]) {\r\n                $scope.data.header_image = cart.items[0].product.images[0].link_square;\r\n            }\r\n\r\n            // Send the cart to the parent window\r\n            sendMessage({ type: \"on_load\", cart: cart }, $scope.settings.app.allowed_origin_hosts);\r\n\r\n            // If there are no payment methods available for this particular situation, show an error\r\n            if (cart.options.payment_methods.length == 0) {\r\n                $scope.data.error = { message: \"No payment methods are available for the selected currency.\" };\r\n            }\r\n\r\n        }, function (error) {\r\n\r\n            // If an error due to an invalid promotion code, re-run without the promotion code.\r\n            if (error.code) {\r\n                if (error.code == \"invalid_promotion_code\") {\r\n                    delete cart.promotion_code;\r\n                    setCart(cart);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Error creating / updating the cart\r\n            $scope.data.error = error;\r\n\r\n            // Hide or cancel showing the spinner\r\n            $scope.hideSpinner();\r\n\r\n            // Open the form\r\n            openPop(asModal);\r\n        });\r\n    }\r\n    \r\n    function openPop(asModal) {\r\n\r\n        // This is run when the iframe / tab is first launched.\r\n        $scope.options.showForm = true;\r\n\r\n        if (asModal) {\r\n            // Launch the modal. If you enable ESC support (keyboard: true) you will get a double onClose event unless you refactor how close is handled.\r\n            $scope.modalInstance = $uibModal.open({\r\n                templateUrl: 'app/pages/simple/checkout.html',\r\n                backdrop: false,\r\n                keyboard: false,\r\n                scope: $scope\r\n            });\r\n\r\n            function clearModal() {\r\n                $timeout(function () {\r\n                    // Reset the payment method. We don't want sensitive payment details to be persisted after the modal is closed.\r\n                    $scope.selectNewPaymentMethod();\r\n                    // Clear any errors\r\n                    $scope.data.error = null;\r\n                }, 500);\r\n            }\r\n\r\n            $scope.modalInstance.result.then(function () { clearModal() }, function () { clearModal() });\r\n\r\n            // We load a pageview when the modal opens so that we don't count pageviews for background loads.\r\n            if (window.__pageview && window.__pageview.recordPageLoad) {\r\n                window.__pageview.recordPageLoad();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Handle a successful payment\r\n    $scope.onPaymentSuccess = function (payment) {\r\n\r\n        $scope.data.payment = payment;\r\n\r\n        // Update the cart to the latest\r\n        $scope.data.cart = payment.cart;\r\n\r\n        // If the payment is completed or pending, show the receipt. A payment that is pending is complete, it is just awaiting capture. For the user, there is no difference.\r\n        if (payment.status == \"completed\" || payment.status == \"pending\") {\r\n\r\n            $scope.data.showSection = \"receipt\";\r\n\r\n            // Scroll to the top of the page.\r\n            scrollTop(asModal);\r\n\r\n            // Load the conversion\r\n            if (window.__conversion && window.__conversion.recordConversion) {\r\n                window.__conversion.recordConversion(payment.order.order_id);\r\n            }\r\n\r\n        } else {\r\n\r\n            // Handle follow-on steps, according to the payment method.\r\n            switch (payment.payment_method.type) {\r\n\r\n                case \"paypal\":\r\n                    $scope.redirect(payment.response_data.redirect_url);\r\n                    break;\r\n\r\n                case \"amazon_pay\":\r\n                    $scope.data.showSection = \"review\";\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.close = function () {\r\n\r\n        // Unregister the onbeforeunload event so you don't get a feedback loop.\r\n        window.onbeforeunload = null;\r\n\r\n        // If scope.data.payment, then they are closing a successful payment. Set the payment to null so any future load will not show the receipt. Reset the order to null.\r\n        if ($scope.data.payment && ($scope.data.payment.status == \"completed\" || $scope.data.payment.status == \"pending\")) {\r\n            $scope.data.payment = null;\r\n            StorageService.remove(\"cart_id\");\r\n        }\r\n\r\n        // Send a close event to the parent.\r\n        sendMessage({ type: \"close\", cart: $scope.data.cart, order: $scope.data.order }, $scope.settings.app.allowed_origin_hosts);\r\n\r\n        // If a modal, close it\r\n        if ($scope.modalInstance) {\r\n            $scope.modalInstance.close();\r\n        } else {\r\n            // Otherwise, close the new tab\r\n            if (window.opener != null) {\r\n                window.close();\r\n            } else {\r\n                // We are in a window that we did not open. This can happen when starting in a modal but ending up on the PayPal review page. Redirect to the main shopping URL.\r\n                var url = localStorage.getItem(\"parent_url\") || SettingsService.get().app.main_shopping_url;\r\n                window.location.href = url;\r\n            }\r\n        }\r\n    }\r\n\r\n    $scope.setPaymentMethod = function (paymentMethod) {\r\n        $scope.options.payment_method = paymentMethod;\r\n    }\r\n\r\n    $scope.selectNewPaymentMethod = function () {\r\n\r\n        delete $scope.data.error;\r\n        delete $scope.data.amazon_pay.data;\r\n        $scope.data.card = { \"type\": \"credit_card\" };\r\n        $scope.data.exp = null;\r\n        $scope.options.payment_method = \"credit_card\";\r\n\r\n        // If the URL contains the payment_id, we are on the dedicated review page. In that case, we will change the URL to re-start the payment. Otherwise, we will just show the payment section.\r\n        if (payment_id) {\r\n            var currentUrl = $location.path().substring(1);\r\n            currentUrl = \"/\" + currentUrl.substring(0, currentUrl.indexOf(\"/\"));\r\n            $location.path(currentUrl);\r\n        } else {\r\n            $scope.data.showSection = \"payment\";\r\n        }\r\n\r\n    }\r\n\r\n    // Handle if the user closes the tab directly.\r\n    window.onbeforeunload = function () {\r\n        $scope.close();\r\n    }\r\n\r\n    function setLanguage(params) {\r\n        var language = params.language;\r\n        if (language) {\r\n            LanguageService.setLanguage(language);\r\n        }\r\n    }\r\n\r\n    function scrollTop(asModal) {\r\n        if (asModal) {\r\n            // Scroll to the top of the modal location\r\n            var elem = document.getElementsByClassName(\"modal\");\r\n            if (elem && elem.length) {\r\n                elem[0].scrollTop = 0;\r\n            }\r\n        } else {\r\n            // Scroll to the top of the document\r\n            $document.scrollTop(0, 500);\r\n        }\r\n    }\r\n\r\n    $scope.redirect = function redirect(url) {\r\n\r\n        // Hide the form, show the spinner.\r\n        $scope.showSpinner();\r\n\r\n        // Clear the onbeforeunload event to prevent a \"close\" event from being sent to the parent during the redirect.\r\n        window.onbeforeunload = null;\r\n\r\n        if (asModal) {\r\n            sendMessage({ type: \"redirect\", url: url }, $scope.settings.app.allowed_origin_hosts);\r\n        } else {\r\n            window.location = url;\r\n        }\r\n\r\n    }\r\n\r\n    $scope.downloadReceipt = function () {\r\n        ApiService.getItemPdf($scope.data.payment.order.url).then(function (response) {\r\n\r\n            var file = new Blob([response.data], { type: \"application/pdf\" });\r\n            saveAs(file, \"Order_\" + $scope.data.payment.order.order_id + \".pdf\");\r\n\r\n        }, function (error) {\r\n            $scope.exception.error = error;\r\n        });\r\n    }\r\n\r\n    $scope.showPaymentSelections = function() {\r\n        \r\n        if ($scope.data && $scope.data.amazon_pay && $scope.data.amazon_pay.data)\r\n            return false;\r\n\r\n        if ($scope.settings && $scope.settings.account.payment_method_types.length < 2)\r\n            return false;\r\n\r\n        if ($scope.data && $scope.data.cart && $scope.data.cart.options.payment_methods.length < 2)\r\n            return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Select the default payment method\r\n    $scope.$watch(\"data.cart.options.payment_methods\", function (newVal, oldVal) {\r\n        if (newVal && newVal != oldVal) {\r\n            $scope.options.payment_method = getDefaultPaymentMethodType(newVal);\r\n        }\r\n    }, true);\r\n\r\n    function getDefaultPaymentMethodType(paymentMethods) {\r\n\r\n        // Provide options.payment_methods object as the paymentMethods parameter in this function.\r\n\r\n        // If you don't have what you are expecting, return null.\r\n        if (!paymentMethods || paymentMethods.length == 0 || !paymentMethods[0].payment_method_type)\r\n            return null;\r\n\r\n        // Returned in order of priority.\r\n        if (_.findWhere(paymentMethods, { \"payment_method_type\": \"credit_card\" }) != null)\r\n            return \"credit_card\";\r\n\r\n        if (_.findWhere(paymentMethods, { \"payment_method_type\": \"paypal\" }) != null)\r\n            return \"paypal\";\r\n\r\n        if (_.findWhere(paymentMethods, { \"payment_method_type\": \"amazon_pay\" }) != null)\r\n            return \"amazon_pay\";\r\n\r\n        // Select the first optino as a catch-all\r\n        return paymentMethods[0].payment_method_type;\r\n    }\r\n\r\n    // Watch for error to be populated, and if so, scroll to it.\r\n    $scope.$watch(\"data.error\", function (newVal, oldVal) {\r\n        if ($scope.data.error) {\r\n            scrollTop(asModal);\r\n        }\r\n    });\r\n\r\n    // If iframe modal (desktop), handle targeted messages from the parent window.\r\n    $scope.$on(\"messageReceived\", function (event, data) {\r\n        // Examine the message and respond as necessary.\r\n        if (data.type == \"add_to_cart\" && data.cart) {\r\n            $scope.showSpinner(350);\r\n            setCart(JSON.parse(data.cart));\r\n        }\r\n    });\r\n\r\n}]);"],"file":"pages.js"}