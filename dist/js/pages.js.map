{"version":3,"names":[],"mappings":"","sources":["pages.js"],"sourcesContent":["app.controller(\"IndexController\", ['$scope', 'ApiService', 'SettingsService', function ($scope, ApiService, SettingsService) {\r\n\r\n    // Get an active product\r\n    var settings = SettingsService.get();\r\n\r\n    var token = utils.getCookie(\"token\");\r\n\r\n    if (!token || token.substring(0, 13) != \"limited.test.\") {\r\n        if (settings.app) {\r\n            if (settings.app.main_shopping_url) {\r\n                window.location = settings.app.main_shopping_url\r\n            }\r\n        }\r\n    } else {\r\n        window.location = \"getting-started\";\r\n    }\r\n\r\n}]);\napp.controller(\"ReviewController\", ['$scope', '$location', '$routeParams', 'CartService', 'PaymentService', 'SettingsService', 'HelperService', 'GeoService', '$document', '$uibModal', 'ApiService', function ($scope, $location, $routeParams, CartService, PaymentService, SettingsService, HelperService, GeoService, $document, $uibModal, ApiService) {\r\n\r\n    // Define a place to hold your data\r\n    $scope.data = {};\r\n    $scope.options = {};\r\n\r\n    // Define the payment_id\r\n    $scope.data.payment_id = $routeParams.id;\r\n\r\n    // Load in some helpers\r\n    $scope.settings = SettingsService.get();\r\n    $scope.helpers = HelperService;\r\n    $scope.geoService = GeoService;\r\n\r\n    $scope.data.header_image = $scope.settings.app.logo_popup_square || \"images/default_popup_icon.png\";\r\n\r\n    // Set the URL for the finish button\r\n    if (SettingsService.get().app.main_shopping_url) {\r\n        $scope.data.return_url = SettingsService.get().app.main_shopping_url;\r\n    } else if (localStorage.getItem(\"parent_url\")) {\r\n        $scope.data.return_url = localStorage.getItem(\"parent_url\");\r\n    }\r\n\r\n    // Set the cart parameters\r\n    $scope.data.params = {};\r\n\r\n    // The payment will have a cart or an invoice, we don't know which. Expand both and we'll use whatever one comes back as not null.\r\n    $scope.data.params.expand = \"cart.items.product,cart.items.subscription_terms,invoice.items.product,invoice.items.subscription_terms,cart.options,invoice.options,order.customer\";\r\n    $scope.data.params.hide = \"cart.items.product.formatted,cart.items.product.prices,cart.items.product.url,cart.items.product.description,cart.items.product.images.link_small,cart.items.product.images.link_medium,cart.items.product.images.link_large,cart.items.product.images.link,cart.items.product.images.filename,cart.items.product.images.formatted,cart.items.product.images.url,cart.items.product.images.date_created,cart.items.product.images.date_modified,invoice.items.product.formatted,invoice.items.product.prices,invoice.items.product.url,invoice.items.product.description,invoice.items.product.images.link_small,invoice.items.product.images.link_medium,invoice.items.product.images.link_large,invoice.items.product.images.link,invoice.items.product.images.filename,invoice.items.product.images.formatted,invoice.items.product.images.url,invoice.items.product.images.date_created,invoice.items.product.images.date_modified\";\r\n\r\n    // Set the cart params for your shipping dropdown directive. They are the same as above, but you have to remove the \"cart\" and \"invoice\" prefixes. We'll also have a bunch of duplicates after stripping the prefix, so we'll remove them.\r\n    $scope.data.saleParams = { expand: utils.deDuplicateCsv($scope.data.params.expand.replaceAll(\"cart.\", \"\").replaceAll(\"invoice.\", \"\")), hide: utils.deDuplicateCsv($scope.data.params.hide.replaceAll(\"cart.\", \"\").replaceAll(\"invoice.\", \"\")) };\r\n\r\n    PaymentService.get($scope.data.payment_id, $scope.data.params).then(function (payment) {\r\n\r\n        if (payment.status == \"completed\") {\r\n            // The payment was previously completed, show the receipt\r\n            $scope.data.payment = payment;\r\n        }\r\n\r\n        // Get the cart or invoice that the payment is associated with\r\n        $scope.data.sale = payment.cart || payment.invoice;\r\n        if (payment.cart) {\r\n            $scope.options.isCartPayment = true;\r\n        }\r\n\r\n        // Get the cart or invoice that the payment is associated with\r\n        $scope.data.sale = payment.cart || payment.invoice;\r\n\r\n        // Open the modal\r\n        openModal();\r\n\r\n        // Set flags to indicate if we need to request the company name and phone number fields, which happens when they're required and not already populated.\r\n        if (HelperService.isRequiredCustomerField('company_name', $scope.data.sale.options) && $scope.data.sale.customer.company_name == null) {\r\n            $scope.options.showCompanyName = true;\r\n        }\r\n\r\n        if (HelperService.isRequiredCustomerField('phone', $scope.data.sale.options) && $scope.data.sale.customer.phone == null) {\r\n            $scope.options.showPhone = true;\r\n        }\r\n\r\n    }, function (error) {\r\n        $scope.data.error = error;\r\n    });\r\n\r\n    // Handle a successful payment\r\n    $scope.onPaymentSuccess = function (payment) {\r\n\r\n        // If the payment comes back with a redirect URL, it means significant changes to the cart have been done that has changed the payment amount significantly enough that the buyer must re-approve the total through PayPal. Redirect.\r\n        if (payment.response_data.redirect_url) {\r\n\r\n            // Redirect to the supplied redirect URL.\r\n            window.location.replace(payment.response_data.redirect_url);\r\n\r\n        } else {\r\n\r\n            // Show the receipt.\r\n            $scope.data.payment = payment;\r\n\r\n            // Load the conversion\r\n            if (window.__conversion && window.__conversion.recordConversion) {\r\n                window.__conversion.recordConversion(payment.order.order_id);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // Watch for error to be populated, and if so, scroll to it.\r\n    $scope.$watch(\"data.error\", function (newVal, oldVal) {\r\n        if ($scope.data.error) {\r\n            $document.scrollTop(0, 500);\r\n        }\r\n    });\r\n\r\n    var openModal = function () {\r\n\r\n        // We load a pageview when the modal opens so that we don't count pageviews for background loads.\r\n        if (window.__pageview && window.__pageview.recordPageLoad) {\r\n            window.__pageview.recordPageLoad();\r\n        }\r\n\r\n        $scope.modalInstance = $uibModal.open({\r\n            templateUrl: 'review.html',\r\n            backdrop: false,\r\n            scope: $scope\r\n        });\r\n    }\r\n\r\n    $scope.downloadReceipt = function () {\r\n        ApiService.getItemPdf($scope.data.payment.order.url).then(function (response) {\r\n\r\n            var file = new Blob([response.data], { type: \"application/pdf\" });\r\n            saveAs(file, \"Order_\" + $scope.data.payment.order.order_id + \".pdf\");\r\n\r\n        }, function (error) {\r\n            $scope.exception.error = error;\r\n        });\r\n    }\r\n\r\n    $scope.close = function () {\r\n        window.location = $scope.data.return_url;\r\n    }\r\n\r\n}]);\r\n\napp.controller(\"PopupController\", ['$scope', 'CartService', 'ApiService', 'GeoService', 'CurrencyService', 'SettingsService', 'HelperService', '$uibModal', '$timeout', 'gettextCatalog', function ($scope, CartService, ApiService, GeoService, CurrencyService, SettingsService, HelperService, $uibModal, $timeout, gettextCatalog) {\r\n\r\n    // Define a place to hold your data\r\n    $scope.data = {};\r\n\r\n    // Load in some helpers\r\n    $scope.geoService = GeoService;\r\n    $scope.settings = SettingsService.get();\r\n    $scope.helpers = HelperService;\r\n    $scope.options = { showSpinner: false };\r\n    $scope.paymentParams = { expand: \"payment_method,payment_method.data,order.customer,order.items.product,order.items.subscription,order.options,cart.options,invoice.options\", show: \"payment_method.*,payment_method.data.*,date_created,order.order_id,order.subtotal,order.total,order.tax,order.discount,order.currency,order.customer.name,order.tax_inclusive,order.customer.customer_id,order.customer.email,order.customer.username,order.customer.billing_address.*,order.items.item_id,order.items.quantity,order.items.price,order.items.price_original,order.items.subtotal,order.items.subtotal_original,order.items.total,order.items.total_original,order.items.name,order.items.subscription.description,order.shipping_item.quantity,order.shipping_item.name,order.shipping_item.price,order.shipping_item.price_original,order.shipping_item.subtotal,order.shipping_item.subtotal_original,order.shipping_item.total,order.shipping_item.total_original,order.items.product.images.link_square,order.options.customer_optional_fields,order,cart.options.*,invoice.options.customer_optional_fields\" };\r\n\r\n    // Set the cart parameters\r\n    $scope.data.params = {};\r\n    $scope.data.params.expand = \"items.product,items.subscription_terms,customer.payment_methods,options\";\r\n    $scope.data.params.hide = \"items.product.formatted,items.product.prices,items.product.url,items.product.description,items.product.images.link_small,items.product.images.link_medium,items.product.images.link_large,items.product.images.link,items.product.images.filename,items.product.images.formatted,items.product.images.url,items.product.images.date_created,items.product.images.date_modified\";\r\n\r\n    // Set default values.\r\n    $scope.data.payment_method = {}; // Will be populated from the user's input into the form.\r\n    $scope.data.header_image = $scope.settings.app.logo_popup_square || \"images/default_popup_icon.png\";\r\n\r\n    // Build your payment method models\r\n    $scope.data.card = { \"type\": \"credit_card\" };\r\n    $scope.data.paypal = {\r\n        \"type\": \"paypal\",\r\n        data: {\r\n            // The following tokens are allowed in the URL: {{payment_id}}, {{order_id}}, {{customer_id}}, {{invoice_id}}. The tokens will be replaced with the actual values upon redirect.\r\n            \"success_url\": window.location.href.substring(0, window.location.href.indexOf(\"#\")) + \"#/payment/review/{{payment_id}}\",\r\n            \"cancel_url\": SettingsService.get().app.main_shopping_url || localStorage.getItem(\"parent_url\")\r\n        }\r\n    }\r\n\r\n    // Get the current cart\r\n    var setCart = function (cart) {\r\n\r\n        // Show the spinner\r\n        showSpinner();\r\n\r\n        // Set an items array if not provided.\r\n        cart.items = cart.items || [{}];\r\n\r\n        // If more than one item in the cart remove all but the first.\r\n        if (cart.items.length > 1) {\r\n            cart.items.splice(1);\r\n        }\r\n\r\n        // If the product already in the cart is different than the product being supplied, remove all items now to enable the spinners to load while replacing the item.\r\n        if ($scope.data.cart && $scope.data.cart.items && $scope.data.cart.items[0] && $scope.data.cart.items[0].product_id != cart.items[0].product_id)\r\n            $scope.$apply(function () {\r\n                $scope.data.cart.items = null;\r\n            });\r\n\r\n        // Update the cart. There might not be a cart at this point; if not, the CartService.update process will create and return a new cart for the user.\r\n        CartService.update(cart, $scope.data.params, true).then(function (cart) {\r\n\r\n            // Set the scope on the cart.\r\n            $scope.data.cart = cart;\r\n\r\n            // Hide or cancel showing the spinner\r\n            hideSpinner();\r\n\r\n            // Open the modal\r\n            openModal();\r\n\r\n            // Override the header image, as necessary.\r\n            if ($scope.settings.app.use_product_icon && cart.items[0].product.images[0]) {\r\n                $scope.data.header_image = cart.items[0].product.images[0].link_square;\r\n            }\r\n\r\n            // Send the cart to the parent window\r\n            sendMessage({ type: \"on_load\", cart: cart });\r\n\r\n        }, function (error) {\r\n            // Error creating / updating the cart\r\n            $scope.data.error = error;\r\n\r\n            // Hide or cancel showing the spinner\r\n            hideSpinner();\r\n\r\n            // Open the modal\r\n            openModal();\r\n        });\r\n    }\r\n\r\n    // Handle a successful payment\r\n    $scope.onPaymentSuccess = function (payment) {\r\n\r\n        // Handle the payment response, depending on the type.\r\n        switch (payment.payment_method.type) {\r\n\r\n            case \"paypal\":\r\n                // Redirect to PayPal to make the payment.\r\n                sendMessage({ type: \"redirect\", url: payment.response_data.redirect_url });\r\n                break;\r\n\r\n            default:\r\n                // Show the receipt.\r\n                $scope.data.payment = payment;\r\n\r\n                // Load the conversion\r\n                if (window.__conversion && window.__conversion.recordConversion) {\r\n                    window.__conversion.recordConversion(payment.order.order_id);\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n    $scope.close = function () {\r\n\r\n        // Remove any payment info\r\n        $scope.data.card = { \"type\": \"credit_card\" };\r\n        // Clear any errors.\r\n        $scope.data.error = null;\r\n\r\n        // Send a close event to the parent.\r\n        sendMessage({ type: \"close\", cart: $scope.data.cart });\r\n\r\n        // Remove the \"in\" class from the modal, which triggers departure animation\r\n        var elem = document.getElementsByClassName(\"modal\")[0].classList.remove(\"in\");\r\n\r\n        // Set a timeout to allow the animation to play.\r\n        $timeout(function () {\r\n\r\n            // If scope.data.payment, then they are closing a successful payment. Set the payment to null so any future load will not show the receipt.\r\n            if ($scope.data.payment) {\r\n                $scope.data.payment = null;\r\n            }\r\n\r\n            // Close the modal\r\n            $scope.modalInstance.close();\r\n\r\n        }, 250)\r\n\r\n    }\r\n\r\n    $scope.downloadReceipt = function () {\r\n        ApiService.getItemPdf($scope.data.payment.order.url).then(function (response) {\r\n\r\n            var file = new Blob([response.data], { type: \"application/pdf\" });\r\n            saveAs(file, \"Order_\" + $scope.data.payment.order.order_id + \".pdf\");\r\n\r\n        }, function (error) {\r\n            $scope.exception.error = error;\r\n        });\r\n    }\r\n\r\n    // A function for sending messages to the parent iframe\r\n    var sendMessage = function (message) {\r\n\r\n        var errorMsg = \"Attempting to send a message to the parent of the iframe window that is not hosted by an allowed hostname: The hostname \" + $scope.originHost + \" is not listed as approved in the app settings. The message will not be sent.\";\r\n\r\n        // Always allow locahost as a valid origin host, and also allow if the origin host is the same as the page host.\r\n        if ($scope.originHost != \"localhost\" && $scope.originHost != \"127.0.0.1\" && (window.location.hostname != $scope.originHost)) {\r\n\r\n            // Only send a message to the page you were invoked from, and if that page is on the list of valid hostnames.\r\n            var validHosts = [];\r\n            if ($scope.settings.app && $scope.settings.app.allowed_origin_hosts) {\r\n                var validHosts = $scope.settings.app.allowed_origin_hosts.split(/[\\n\\s,]+/);\r\n            }\r\n\r\n            if (validHosts.indexOf($scope.originHost) == -1) {\r\n                console.warn(errorMsg);\r\n                return;\r\n            }\r\n        }\r\n\r\n        parent.postMessage(JSON.stringify(message), \"*\");\r\n    }\r\n\r\n    var showSpinner = function () {\r\n        $scope.spinnerTimeout = $timeout(function () {\r\n            $scope.options.showSpinner = true;\r\n        }, 300);\r\n    }\r\n\r\n    var hideSpinner = function () {\r\n        $timeout.cancel($scope.spinnerTimeout);\r\n        $timeout(function () {\r\n            $scope.options.showSpinner = false;\r\n        }, 300);\r\n    }\r\n\r\n    // Listen for messages from the parent that hosts the iframe.\r\n    window.addEventListener(\"message\", function (message) {\r\n\r\n        var originHost = message.origin.replace(\"https://\", \"\").replace(\"http://\", \"\");\r\n        var errorMsg = \"Attempting to receive a message from the parent of the iframe window that is not hosted by an allowed hostname: The hostname \" + originHost + \" is not listed as approved in the app settings. The message will be ignored.\";\r\n\r\n        // Always allow locahost as a valid origin host, and also allow if the origin host is the same as the page host.\r\n        if (originHost != \"localhost\" && originHost != \"127.0.0.1\" && (window.location.hostname != originHost)) {\r\n\r\n            if (!$scope.settings.app || !$scope.settings.app.allowed_origin_hosts) {\r\n                console.log(errorMsg);\r\n                return;\r\n            }\r\n\r\n            // The hosts are delimited by space, comma or newline.\r\n            var validHosts = [];\r\n            if ($scope.settings.app && $scope.settings.app.allowed_origin_hosts) {\r\n                var validHosts = $scope.settings.app.allowed_origin_hosts.split(/[\\n\\s,]+/);\r\n            }\r\n\r\n            if (validHosts.indexOf(originHost) == -1) {\r\n                console.log(errorMsg);\r\n                return;\r\n            }\r\n        }\r\n\r\n        $scope.originHost = originHost;\r\n\r\n        // message.data contains a serialized object. Parse it so you can examine.\r\n        if (message.data) {\r\n            var obj = JSON.parse(message.data);\r\n\r\n            // Examine the message and respond as necessary.\r\n            if (obj.type = \"add_to_cart\" && obj.cart) {\r\n                setCart(JSON.parse(obj.cart));\r\n            }\r\n\r\n            if (obj.type = \"set_parent_url\" && obj.url) {\r\n                localStorage.setItem(\"parent_url\", obj.url);\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    // Credit card expiration formatter\r\n    var isExpInputDelete = false;\r\n    document.addEventListener(\"keydown\", function (event) {\r\n        if (event.which == 8 || event.which == 46) {\r\n            isExpInputDelete = true;\r\n        } else {\r\n            isExpInputDelete = false;\r\n        }\r\n    });\r\n\r\n    $scope.$watch(\"data.cart.customer.billing_address.country\", function (newVal, oldVal) {\r\n        if (newVal == \"US\") {\r\n            $scope.data.postalCodePlaceholder = \"ZIP\"\r\n        } else {\r\n            $scope.data.postalCodePlaceholder = gettextCatalog.getString(\"Postal Code\");\r\n        }\r\n    });\r\n\r\n    $scope.$watch(\"data.card.data.exp\", function (newVal, oldVal) {\r\n\r\n        if (newVal != oldVal) {\r\n\r\n            if (!newVal) {\r\n                if ($scope.data.card.data) {\r\n                    $scope.data.card.data.exp = null;\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (newVal == \"1/\") {\r\n                $scope.data.card.data.exp = \"01 / \";\r\n                return;\r\n            }\r\n\r\n            // Check if pressing backspace or delete.\r\n            if (isExpInputDelete) {\r\n                if (utils.right(newVal, 2) == \" /\") {\r\n                    $scope.data.card.data.exp = utils.left(newVal, newVal.length - 2);\r\n                    return;\r\n                }\r\n                $scope.data.card.data.exp = newVal;\r\n                return;\r\n            }\r\n\r\n            // Remove any non-numeric from the string\r\n            var result = \"\";\r\n            if (newVal) {\r\n                result = newVal.replace(/[^0-9]/g, \"\");\r\n            }\r\n\r\n            // If the length is 1 and the character is 2-9, prepend with a 0. When the user first types 2-9, it will be converted to 02 - 09.\r\n            if (result.length == 1 && /[2-9]/.test(result)) {\r\n                result = \"0\".concat(result);\r\n            }\r\n\r\n            // If the length is 2 and the second character is 3-9, insert a \" / \" after the second character\r\n            if (result.length == 2 && /[3-9]/.test(utils.right(result, 1))) {\r\n                result = result + \" / \";\r\n            }\r\n\r\n            // If the length is 2 characters or more, put a / at position 3 unless oldVal is longer than newVal, which means they're backspacing, or unless the last character are already \"/ \".\r\n            if (result.length >= 2 && utils.right(result, 2) != \"/ \") {\r\n                result = result.substring(0, 2) + \" / \" + utils.right(result, result.length - 2);\r\n            }\r\n\r\n            // Dump anything after 9 charaters\r\n            if (result.length >= 9) {\r\n                result = utils.left(result, 9);\r\n            }\r\n\r\n            $scope.data.card.data.exp = result;\r\n\r\n            // Fill the expiration date on the model with any valid values you have\r\n            if (result.length >= 2) {\r\n                $scope.data.card.data.exp_month = result.substring(0, 2);\r\n            }\r\n\r\n            if (result.length == 7) {\r\n                $scope.data.card.data.exp_year = utils.right(result, 2);\r\n            }\r\n\r\n        }\r\n\r\n    });\r\n\r\n    var openModal = function () {\r\n\r\n        // We load a pageview when the modal opens so that we don't count pageviews for background loads.\r\n        if (window.__pageview && window.__pageview.recordPageLoad) {\r\n            window.__pageview.recordPageLoad();\r\n        }\r\n\r\n        $scope.modalInstance = $uibModal.open({\r\n            templateUrl: 'simple.html',\r\n            backdrop: false,\r\n            scope: $scope\r\n        });\r\n    }\r\n\r\n}]);"],"file":"pages.js","sourceRoot":"/source/"}